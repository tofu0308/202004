{"version":3,"sources":["index.js"],"names":["Welcome","React","Component","Container","onClick","e","props","dispatch","type","console","log","this","value","App","connect","state","store","createStore","action","Object","assign","render","document","getElementById"],"mappings":"8MAKMA,E,uKAEF,OAAO,gD,GAFWC,IAAMC,WAOtBC,E,uKACM,IAAD,OACP,OACE,6BACE,kBAACH,EAAD,MAEA,4BAAQI,QAAW,SAAAC,GAEjB,EAAKC,MAAMC,SAAS,CAACC,KAAM,cAC3BC,QAAQC,IAAI,eAHd,kCAQF,2BAAIC,KAAKL,MAAMM,Y,GAdIX,IAAMC,WAqBzBW,EAAMC,aACV,SAAAC,GAAK,OAAIA,IADCD,CAEVX,GAgBIa,EAAQC,aAbE,WAAiC,IAAhCF,EAA+B,uDAAvB,CAACH,MAAO,GAAIM,EAAW,uCAG5C,OAAOA,EAAOV,MACZ,IAAK,YAEH,OAAOW,OAAOC,OAAO,GAAI,CAACR,MAAOG,EAAMH,MAAQ,IACjD,QACE,OAAOG,MAWfM,iBACE,kBAAC,IAAD,CAAUL,MAAQA,GACd,kBAACH,EAAD,OAEJS,SAASC,eAAe,W","file":"static/js/main.92294f88.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, World</h1>;\n  }\n}\n\n\nclass Container extends  React.Component {\n  render() {\n    return (\n      <div>\n        <Welcome />\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"INCREMENT\"});\n          console.log('INCREMENT');\n        }}>\n          加算ボタン\n        </button>\n\n      <p>{this.props.value}</p>\n      </div>\n    )\n  }\n}\n\n// NewComponent = connect(ComponentからdispatchされたAction) (Component)\nconst App = connect(\n  state => state\n)(Container);\n\n// Reducer\nconst reducer = (state = {value: 0}, action) => {\n    // Componentの中でdispatchされたActionがaction変数に入ってくる\n    // action = { type: \"INCREMENT\" }\n    switch(action.type) {\n      case \"INCREMENT\":\n        // valueを加算\n        return Object.assign({}, {value: state.value + 1});\n      default:\n        return state;\n    }\n}\n\n// Reducerの戻り値を新しい状態（State）としてStoreで管理する\nconst store = createStore(reducer);\n\n// Root Render\n// ReduxのProviderコンポーネントで、Appコンポーネント\n// （connect関数にComponentを渡して作成したNewComponent）をラップし、Storeを渡す\n// （簡単に言えば）propsにStateが入る\nrender (\n  <Provider store={ store }>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}