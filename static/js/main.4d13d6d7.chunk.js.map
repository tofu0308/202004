{"version":3,"sources":["actions/todo.js","reducers/todos.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","index.js"],"names":["nextTodoId","addTodo","text","type","id","todo","state","action","todos","undefined","todoApp","combineReducers","AddTodo","input","dispatch","ref","node","onClick","value","connect","Todo","TodoList","map","key","VisibleTodoList","console","log","App","todoStore","createStore","getState","Welcome","React","Component","Container","e","props","this","store","Object","assign","render","document","getElementById"],"mappings":"8MAAIA,EAAa,EACJC,EAAU,SAACC,GACtB,MAAO,CACLC,KAAM,WACNC,GAAIJ,IACJE,SAGWD,I,QCRTI,EAAO,SAACC,EAAOC,GACnB,OAAQA,EAAOJ,MACb,IAAK,WACH,MAAO,CACLC,GAAIG,EAAOH,GACXF,KAAMK,EAAOL,MAEjB,QACE,OAAOI,IAiBEE,EAbD,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIC,EAAW,uCACpC,OAAOA,EAAOJ,MACZ,IAAK,WACH,MAAM,GAAN,mBACKG,GADL,CAEED,OAAKI,EAAWF,KAGpB,QAAS,OAAOD,IChBLI,EADCC,YAAgB,CAAEH,UCC9BI,EAAU,YAAiB,IACzBC,EADUC,EAAc,EAAdA,SAGd,OACE,6BACE,2BAAOC,IAAK,SAACC,GACXH,EAAQG,KAEV,4BAAQC,QAAW,WACjBH,EAASb,EAAQY,EAAMK,QACvBL,EAAMK,MAAQ,KAFhB,cAWSN,EAFfA,EAASO,cAAUP,GCPJQ,EAZF,SAAC,GAAD,IAAGlB,EAAH,EAAGA,KAAH,OACX,4BACGA,ICmBUmB,EApBE,SAAC,GAAD,IAAGb,EAAH,EAAGA,MAAH,OACf,4BACGA,EAAMc,KAAI,SAACjB,GAAD,OACT,kBAAC,EAAD,eACEkB,IAAKlB,EAAKD,IACNC,SCIGmB,EAHSL,aANA,SAACb,GAGvB,OAFAmB,QAAQC,IAAI,mBACZD,QAAQC,IAAIpB,GACL,CAAEE,MAAOF,EAAME,SAGAW,CAEtBE,GCDaM,EANH,kBACV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGAC,EAAYC,YAAYxB,GAC5BuB,EAAUd,SAASb,EAAQ,iBAC3B2B,EAAUd,SAASb,EAAQ,iBAC3B2B,EAAUd,SAASb,EAAQ,iBAE3BwB,QAAQC,IAAIE,EAAUE,Y,IAGhBC,E,uKAEF,OAAO,gD,GAFWC,IAAMC,WAKtBC,E,uKACM,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MAEA,4BAAQjB,QAAW,SAAAkB,GAEjB,EAAKC,MAAMtB,SAAS,CAACX,KAAM,cAC3BsB,QAAQC,IAAI,EAAKU,OACjBX,QAAQC,IAAI,eAJd,kCASA,4BAAQT,QAAW,SAAAkB,GAEjB,EAAKC,MAAMtB,SAAS,CAACX,KAAM,cAC3BsB,QAAQC,IAAI,EAAKU,OACjBX,QAAQC,IAAI,eAJd,kCASF,2BAAIW,KAAKD,MAAMlB,Y,GAxBIc,IAAMC,WA+BzBN,EAAMR,aACV,SAAAb,GAAK,OAAIA,IADCa,CAEVe,GAqBII,EAAQT,aAlBE,WAAiC,IAAhCvB,EAA+B,uDAAvB,CAACY,MAAO,GAAIX,EAAW,uCAG5C,OAAOA,EAAOJ,MACZ,IAAK,YAGH,OADAsB,QAAQC,IAAR,wCAAyBpB,EAAMY,QACxBqB,OAAOC,OAAO,GAAI,CAACtB,MAAOZ,EAAMY,MAAQ,IAE/C,IAAK,YAGH,OADAO,QAAQC,IAAR,wCAAyBpB,EAAMY,QACxBqB,OAAOC,OAAO,GAAI,CAACtB,MAAOZ,EAAMY,MAAQ,IACjD,QAAS,OAAOZ,MAYxBmC,iBACE,kBAAC,IAAD,CAAUH,MAAQA,GACd,kBAAC,EAAD,OAEJI,SAASC,eAAe,SAG1BF,iBACE,kBAAC,IAAD,CAAUH,MAAQV,GACd,kBAAC,EAAD,OAEJc,SAASC,eAAe,W","file":"static/js/main.4d13d6d7.chunk.js","sourcesContent":["let nextTodoId = 0;\nexport const addTodo = (text) => {\n  return {\n    type: 'ADD_TODO',\n    id: nextTodoId++,\n    text\n  }\n}\nexport default addTodo","const todo = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text\n      }\n    default:\n      return state\n  }\n}\n\nconst todos = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD_TODO': {\n      return [\n        ...state,\n        todo(undefined, action)\n      ]\n    }\n    default: return state\n  }\n}\n\n\nexport default todos","import { combineReducers } from 'redux'\nimport todos from './todos'\n\nconst todoApp = combineReducers({ todos })\nexport default todoApp","import React from 'react'\nimport { connect } from 'react-redux'\nimport addTodo from '../actions/todo'\n\nlet AddTodo = ({dispatch}) => {\n  let input;\n\n  return(\n    <div>\n      <input ref={(node)=> {\n        input = node;\n      }} />\n      <button onClick = {()=>{\n        dispatch(addTodo(input.value));\n        input.value = '';\n      }}>\n        add todo\n      </button>\n    </div>\n  );\n}\nAddTodo= connect()(AddTodo);\n\nexport default AddTodo","import React /*,{ PropTypes }*/ from 'react'\n\nconst Todo = ({ text }) => (\n  <li>\n    {text}\n  </li>\n)\n\n/* 謎エラー吐くので一旦不使用にする\nTodo.propTypes = {\n  text: PropTypes.string.isRequired\n}\n*/\n\nexport default Todo","import React /*,{ PropTypes }*/ from \"react\"\nimport Todo from './Todo'\n\nconst TodoList = ({ todos }) => (\n  <ul>\n    {todos.map((todo) =>\n      <Todo\n        key={todo.id}\n        {...todo}\n      />\n    )}\n  </ul>\n)\n\n/* 謎エラー吐くので一旦不使用にする\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired\n}\n*/\n\nexport default TodoList\n\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList'\n\nconst mapStateToProps = (state) => {\n  console.log('mapStateToProps');\n  console.log(state);\n  return { todos: state.todos }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps\n)(TodoList)\nexport default VisibleTodoList","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <VisibleTodoList />\n    <AddTodo />\n  </div>\n)\nexport default App","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nimport { addTodo } from './actions/todo'\nimport todo from './reducers'\nimport Todo from './components/App'\n\n\nlet todoStore = createStore(todo);\ntodoStore.dispatch(addTodo('Hello World!'));\ntodoStore.dispatch(addTodo('Hello React!'))\ntodoStore.dispatch(addTodo('Hello Redux!'))\n\nconsole.log(todoStore.getState());\n\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, World</h1>;\n  }\n}\nclass Container extends  React.Component {\n  render() {\n    return (\n      <div>\n        <Welcome />\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"INCREMENT\"});\n          console.log(this.props);\n          console.log('INCREMENT');\n        }}>\n          加算ボタン\n        </button>\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"DECRIMENT\"});\n          console.log(this.props);\n          console.log('DECRIMENT');\n        }}>\n          減算ボタン\n        </button>\n\n      <p>{this.props.value}</p>\n      </div>\n    )\n  }\n}\n\n// NewComponent = connect(ComponentからdispatchされたAction) (Component)\nconst App = connect(\n  state => state\n)(Container);\n\n// Reducer\nconst reducer = (state = {value: 0}, action) => {\n    // Componentの中でdispatchされたActionがaction変数に入ってくる\n    // action = { type: \"INCREMENT\" }\n    switch(action.type) {\n      case \"INCREMENT\":\n        // valueを加算\n        console.log(`加算前のvalue:${state.value}`);\n        return Object.assign({}, {value: state.value + 1});\n\n        case \"DECRIMENT\":\n          // valueを減算\n          console.log(`減算前のvalue:${state.value}`);\n          return Object.assign({}, {value: state.value - 1});\n        default: return state;\n    }\n}\n\n// Reducerの戻り値を新しい状態（State）としてStoreで管理する\nconst store = createStore(reducer);\n\n\n// Root Render\n// ReduxのProviderコンポーネントで、Appコンポーネント\n// （connect関数にComponentを渡して作成したNewComponent）をラップし、Storeを渡す\n// （簡単に言えば）propsにStateが入る\nrender (\n  <Provider store={ store }>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nrender (\n  <Provider store={ todoStore }>\n      <Todo />\n  </Provider>,\n  document.getElementById(\"todo\")\n);\n"],"sourceRoot":""}