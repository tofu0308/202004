{"version":3,"sources":["index.js"],"names":["Todo","React","Component","nextTodoId","addTodo","text","type","id","Welcome","Container","onClick","e","props","dispatch","console","log","this","value","App","connect","state","store","createStore","action","Object","assign","getState","render","document","getElementById"],"mappings":"sPAOMA,E,uKAEF,OAAO,gD,GAFQC,IAAMC,WAOrBC,EAAa,EACJC,EAAU,SAACC,GACtB,MAAM,CACJC,KAAM,WACNC,GAAIJ,IACJE,SAIEG,E,uKAEF,OAAO,gD,GAFWP,IAAMC,WAOtBO,E,uKACM,IAAD,OACP,OACE,6BACE,kBAACD,EAAD,MAEA,4BAAQE,QAAW,SAAAC,GAEjB,EAAKC,MAAMC,SAAS,CAACP,KAAM,cAC3BQ,QAAQC,IAAI,EAAKH,OACjBE,QAAQC,IAAI,eAJd,kCASA,4BAAQL,QAAW,SAAAC,GAEjB,EAAKC,MAAMC,SAAS,CAACP,KAAM,cAC3BQ,QAAQC,IAAI,EAAKH,OACjBE,QAAQC,IAAI,eAJd,kCASF,2BAAIC,KAAKJ,MAAMK,Y,GAxBIhB,IAAMC,WA+BzBgB,EAAMC,aACV,SAAAC,GAAK,OAAIA,IADCD,CAEVV,GA6BIY,EAAQC,aA1BE,WAAiC,IAAhCF,EAA+B,uDAAvB,CAACH,MAAO,GAAIM,EAAW,uCAG5C,OAAOA,EAAOjB,MACZ,IAAK,YAGH,OADAQ,QAAQC,IAAR,wCAAyBK,EAAMH,QACxBO,OAAOC,OAAO,GAAI,CAACR,MAAOG,EAAMH,MAAQ,IAE/C,IAAK,YAGH,OADAH,QAAQC,IAAR,wCAAyBK,EAAMH,QACxBO,OAAOC,OAAO,GAAI,CAACR,MAAOG,EAAMH,MAAQ,IAG/C,IAAK,WACH,MAAO,CACLV,GAAIgB,EAAOhB,GACXF,KAAMkB,EAAOlB,MAGnB,QAAS,OAAOe,MAQxBC,EAAMR,SAAST,EAAQ,WACvBU,QAAQC,IAAIM,EAAMK,YAMlBC,iBACE,kBAAC,IAAD,CAAUN,MAAQA,GACd,kBAACH,EAAD,MACA,kBAAClB,EAAD,OAEJ4B,SAASC,eAAe,W","file":"static/js/main.e81e77d4.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\n\n// component\nclass Todo extends React.Component {\n  render() {\n    return <h1>Hello, World</h1>;\n  }\n}\n\n// actions\nlet nextTodoId = 0;\nexport const addTodo = (text) => {\n  return{\n    type: 'ADD_TODO',\n    id: nextTodoId ++,\n    text\n  }\n}\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, World</h1>;\n  }\n}\n\n\nclass Container extends  React.Component {\n  render() {\n    return (\n      <div>\n        <Welcome />\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"INCREMENT\"});\n          console.log(this.props);\n          console.log('INCREMENT');\n        }}>\n          加算ボタン\n        </button>\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"DECRIMENT\"});\n          console.log(this.props);\n          console.log('DECRIMENT');\n        }}>\n          減算ボタン\n        </button>\n\n      <p>{this.props.value}</p>\n      </div>\n    )\n  }\n}\n\n// NewComponent = connect(ComponentからdispatchされたAction) (Component)\nconst App = connect(\n  state => state\n)(Container);\n\n// Reducer\nconst reducer = (state = {value: 0}, action) => {\n    // Componentの中でdispatchされたActionがaction変数に入ってくる\n    // action = { type: \"INCREMENT\" }\n    switch(action.type) {\n      case \"INCREMENT\":\n        // valueを加算\n        console.log(`加算前のvalue:${state.value}`);\n        return Object.assign({}, {value: state.value + 1});\n\n        case \"DECRIMENT\":\n          // valueを減算\n          console.log(`減算前のvalue:${state.value}`);\n          return Object.assign({}, {value: state.value - 1});\n\n          // TODO追加\n          case 'ADD_TODO':\n            return {\n              id: action.id,\n              text: action.text\n            }\n\n        default: return state;\n    }\n}\n\n// Reducerの戻り値を新しい状態（State）としてStoreで管理する\nconst store = createStore(reducer);\n\n\nstore.dispatch(addTodo('store!'))\nconsole.log(store.getState());\n\n// Root Render\n// ReduxのProviderコンポーネントで、Appコンポーネント\n// （connect関数にComponentを渡して作成したNewComponent）をラップし、Storeを渡す\n// （簡単に言えば）propsにStateが入る\nrender (\n  <Provider store={ store }>\n      <App />\n      <Todo />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}