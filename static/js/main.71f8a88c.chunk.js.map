{"version":3,"sources":["actions/todo.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","components/App.js","index.js"],"names":["nextTodoId","addTodo","text","type","id","todo","state","action","completed","Object","assign","todos","undefined","map","t","visibilityFilter","filter","todoApp","combineReducers","AddTodo","input","dispatch","ref","node","onClick","value","length","connect","Todo","style","textDecoration","TodoList","onTodoClick","key","getVisibleTodos","VisibleTodoList","toggleTodo","Link","active","children","href","e","preventDefault","FilterLink","ownProps","Footer","App","todoStore","createStore","console","log","getState","Welcome","React","Component","Container","props","this","store","render","document","getElementById"],"mappings":"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","file":"static/js/main.71f8a88c.chunk.js","sourcesContent":["let nextTodoId = 0;\nexport const addTodo = (text) => {\n  return {\n    type: 'ADD_TODO',\n    id: nextTodoId++,\n    text\n  }\n}\n\nexport const toggleTodo = (id) => {\n  return {\n    type: 'TOGGLE_TODO',\n    id\n  }\n}\n\nexport const setVisibilityFilter = (filter) => {\n return {\n   type: 'SET_VISIBILITY_FILTER',\n   filter\n } \n}\n\n\nexport default addTodo","const todo = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      }\n\n    case 'TOGGLE_TODO': \n      if(state.id !== action.id) {\n        return state\n      }\n      return Object.assign({}, state, {completed:!state.completed});\n\n    default: return state\n  }\n}\n\nconst todos = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD_TODO': {\n      return [\n        ...state,\n        todo(undefined, action)\n      ]\n    }\n\n    case 'TOGGLE_TODO': {\n      return state.map((t => \n        todo(t, action)\n      ))\n    }\n\n    default: return state\n  }\n}\n\n\nexport default todos","const visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch(action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n\n    default: return state\n  }\n}\n\nexport default visibilityFilter","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});\nexport default todoApp","import React from 'react'\nimport { connect } from 'react-redux'\nimport addTodo from '../actions/todo'\n\nlet AddTodo = ({dispatch}) => {\n  let input;\n\n  return(\n    <div>\n      <input ref={(node)=> {\n        input = node;\n      }} />\n      <button onClick = {()=>{\n        if(input.value.length) dispatch(addTodo(input.value));\n        \n        input.value = '';\n      }}>\n        add todo\n      </button>\n    </div>\n  );\n}\nAddTodo= connect()(AddTodo);\n\nexport default AddTodo","import React /*,{ PropTypes }*/ from 'react'\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{textDecoration: completed ? 'line-through' : 'none'}}\n  >\n    {text}\n  </li>\n)\n\n/* 謎エラー吐くので一旦不使用にする\nTodo.propTypes = {\n  text: PropTypes.string.isRequired\n}\n*/\n\nexport default Todo","import React /*,{ PropTypes }*/ from \"react\"\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, onTodoClick }) => (\n  <ul>\n    {todos.map((todo) =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => onTodoClick(todo.id)}\n      />\n    )}\n  </ul>\n)\n\n/* 謎エラー吐くので一旦不使用にする\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired\n}\n*/\n\nexport default TodoList\n\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList'\nimport { toggleTodo } from '../actions/todo';\n\nconst getVisibleTodos = (todos, filter) => {\n  switch(filter) {\n    case 'SHOW_ALL':\n      return todos\n    case 'SHOW_COMPLETED':\n      return todos.filter((t) => t.completed)\n    case 'SHOW_ACTIVE':\n      return todos.filter((t) => !t.completed)\n    default: return todos\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTodoClick: (id) => {\n      dispatch(toggleTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\nexport default VisibleTodoList","import React from 'react';\n\nconst Link = ({active, children, onClick}) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    <a\n      href=\"#\"\n      onClick={(e)=>{\n        e.preventDefault()\n        onClick()\n      }}\n    >\n      {children}\n    </a>\n  )\n};\n\nexport default Link;","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions/todo';\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps)=> {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps)=> {\n  return {\n    onClick: ()=> {\n      dispatch(setVisibilityFilter(ownProps.filter));\n    }\n  }\n}\n\nconst FilterLink = connect(mapStateToProps,mapDispatchToProps)(Link);\n\nexport default FilterLink;","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\n\n\nconst Footer = () => (\n  <p>\n    SHOW:\n    {\" \"}\n    <FilterLink filter=\"SHOW_ALL\">All</FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_ACTIVE\">Active</FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_COMPLETED\">Completed</FilterLink>\n  </p>\n);\n\nexport default Footer;","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport Footer from './Footer'\n\nconst App = () => (\n  <div>\n    <VisibleTodoList />\n    <AddTodo />\n    <Footer />\n  </div>\n)\nexport default App","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nimport { addTodo, toggleTodo, setVisibilityFilter } from './actions/todo'\n\nimport todo from './reducers'\nimport Todo from './components/App'\n\n\nlet todoStore = createStore(todo);\n\n// 初期値\nconsole.log(todoStore.getState());\n\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, World</h1>;\n  }\n}\nclass Container extends  React.Component {\n  render() {\n    return (\n      <div>\n        <Welcome />\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"INCREMENT\"});\n          console.log(this.props);\n          console.log('INCREMENT');\n        }}>\n          加算ボタン\n        </button>\n\n        <button onClick = {e => {\n          // ReducerにActionをdispatchする\n          this.props.dispatch({type: \"DECRIMENT\"});\n          console.log(this.props);\n          console.log('DECRIMENT');\n        }}>\n          減算ボタン\n        </button>\n\n      <p>{this.props.value}</p>\n      </div>\n    )\n  }\n}\n\n// NewComponent = connect(ComponentからdispatchされたAction) (Component)\nconst App = connect(\n  state => state\n)(Container);\n\n// Reducer\nconst reducer = (state = {value: 0}, action) => {\n    // Componentの中でdispatchされたActionがaction変数に入ってくる\n    // action = { type: \"INCREMENT\" }\n    switch(action.type) {\n      case \"INCREMENT\":\n        // valueを加算\n        console.log(`加算前のvalue:${state.value}`);\n        return Object.assign({}, {value: state.value + 1});\n\n        case \"DECRIMENT\":\n          // valueを減算\n          console.log(`減算前のvalue:${state.value}`);\n          return Object.assign({}, {value: state.value - 1});\n        default: return state;\n    }\n}\n\n// Reducerの戻り値を新しい状態（State）としてStoreで管理する\nconst store = createStore(reducer);\n\n\n// Root Render\n// ReduxのProviderコンポーネントで、Appコンポーネント\n// （connect関数にComponentを渡して作成したNewComponent）をラップし、Storeを渡す\n// （簡単に言えば）propsにStateが入る\nrender (\n  <Provider store={ store }>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nrender (\n  <Provider store={ todoStore }>\n      <Todo />\n  </Provider>,\n  document.getElementById(\"todo\")\n);\n"],"sourceRoot":""}